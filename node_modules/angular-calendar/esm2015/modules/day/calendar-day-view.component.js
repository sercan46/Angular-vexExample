import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, } from '@angular/core';
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * <mwl-calendar-day-view
 *  [viewDate]="viewDate"
 *  [events]="events">
 * </mwl-calendar-day-view>
 * ```
 */
let CalendarDayViewComponent = class CalendarDayViewComponent {
    constructor() {
        /**
         * An array of events to display on view
         * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must divide equally into 60.
         */
        this.hourSegments = 2;
        /**
         * The height in pixels of each hour segment
         */
        this.hourSegmentHeight = 30;
        /**
         * The minimum height in pixels of each event
         */
        this.minimumEventHeight = 30;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPlacement = 'auto';
        /**
         * Whether to append tooltips to the body or next to the trigger element
         */
        this.tooltipAppendToBody = true;
        /**
         * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip
         * will be displayed immediately.
         */
        this.tooltipDelay = null;
        /**
         * Whether to snap events to a grid when dragging
         */
        this.snapDraggedEvents = true;
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * An output that will be called before the view is rendered for the current day.
         * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template
         */
        this.beforeViewRender = new EventEmitter();
    }
};
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "viewDate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "events", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "hourSegments", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "hourSegmentHeight", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "hourDuration", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "minimumEventHeight", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "dayStartHour", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "dayStartMinute", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "dayEndHour", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "dayEndMinute", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "refresh", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "locale", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "eventSnapSize", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "tooltipPlacement", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "tooltipTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "tooltipAppendToBody", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "tooltipDelay", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "hourSegmentTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "eventTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "eventTitleTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "eventActionsTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "snapDraggedEvents", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "allDayEventsLabelTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "currentTimeMarkerTemplate", void 0);
__decorate([
    Input()
], CalendarDayViewComponent.prototype, "validateEventTimesChanged", void 0);
__decorate([
    Output()
], CalendarDayViewComponent.prototype, "eventClicked", void 0);
__decorate([
    Output()
], CalendarDayViewComponent.prototype, "hourSegmentClicked", void 0);
__decorate([
    Output()
], CalendarDayViewComponent.prototype, "eventTimesChanged", void 0);
__decorate([
    Output()
], CalendarDayViewComponent.prototype, "beforeViewRender", void 0);
CalendarDayViewComponent = __decorate([
    Component({
        selector: 'mwl-calendar-day-view',
        template: `
    <mwl-calendar-week-view
      class="cal-day-view"
      [daysInWeek]="1"
      [viewDate]="viewDate"
      [events]="events"
      [hourSegments]="hourSegments"
      [hourDuration]="hourDuration"
      [hourSegmentHeight]="hourSegmentHeight"
      [minimumEventHeight]="minimumEventHeight"
      [dayStartHour]="dayStartHour"
      [dayStartMinute]="dayStartMinute"
      [dayEndHour]="dayEndHour"
      [dayEndMinute]="dayEndMinute"
      [refresh]="refresh"
      [locale]="locale"
      [eventSnapSize]="eventSnapSize"
      [tooltipPlacement]="tooltipPlacement"
      [tooltipTemplate]="tooltipTemplate"
      [tooltipAppendToBody]="tooltipAppendToBody"
      [tooltipDelay]="tooltipDelay"
      [hourSegmentTemplate]="hourSegmentTemplate"
      [eventTemplate]="eventTemplate"
      [eventTitleTemplate]="eventTitleTemplate"
      [eventActionsTemplate]="eventActionsTemplate"
      [snapDraggedEvents]="snapDraggedEvents"
      [allDayEventsLabelTemplate]="allDayEventsLabelTemplate"
      [currentTimeMarkerTemplate]="currentTimeMarkerTemplate"
      [validateEventTimesChanged]="validateEventTimesChanged"
      (eventClicked)="eventClicked.emit($event)"
      (hourSegmentClicked)="hourSegmentClicked.emit($event)"
      (eventTimesChanged)="eventTimesChanged.emit($event)"
      (beforeViewRender)="beforeViewRender.emit($event)"
    ></mwl-calendar-week-view>
  `
    })
], CalendarDayViewComponent);
export { CalendarDayViewComponent };
//# sourceMappingURL=data:application/json;base64,