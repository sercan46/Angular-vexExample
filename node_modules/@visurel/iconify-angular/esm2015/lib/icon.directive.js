import { IconService } from './icon.service';
import { Directive, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { normalize, SVG } from './svg';
export class IconDirective {
    constructor(domSanitizer, iconService) {
        this.domSanitizer = domSanitizer;
        this.iconService = iconService;
        this.width = '1em';
        this.height = '1em';
        this.rotate = 0;
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes) {
            this.updateIcon();
        }
    }
    updateIcon() {
        const icon = this.getIcon();
        const svg = new SVG(normalize(icon));
        this.iconHTML = this.generateSvgHtml(svg);
    }
    getIcon() {
        const iconInput = this.icon || this.icIcon;
        if (typeof iconInput !== 'object' && typeof iconInput !== 'string') {
            throw new Error('[Iconify]: No icon provided');
        }
        return typeof iconInput === 'object' ? iconInput : this.iconService.get(iconInput);
    }
    generateSvgHtml(svg) {
        return this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({
            width: this.size || this.width,
            height: this.size || this.height,
            color: this.color,
            inline: this.inline,
            box: this.box,
            align: this.align,
            hFlip: this.hFlip,
            vFlip: this.vFlip,
            flip: this.flip,
            rotate: this.rotate
        }));
    }
}
IconDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ic-icon,[icIcon]'
            },] }
];
IconDirective.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IconService }
];
IconDirective.propDecorators = {
    icIcon: [{ type: Input }],
    icon: [{ type: Input }],
    color: [{ type: Input }],
    inline: [{ type: Input }, { type: HostBinding, args: ['class.ic-inline',] }],
    box: [{ type: Input }],
    size: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    align: [{ type: Input }],
    hFlip: [{ type: Input }],
    vFlip: [{ type: Input }],
    flip: [{ type: Input }],
    rotate: [{ type: Input }],
    iconHTML: [{ type: HostBinding, args: ['innerHTML',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvaWNvbmlmeS9zcmMvIiwic291cmNlcyI6WyJsaWIvaWNvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBS3ZDLE1BQU0sT0FBTyxhQUFhO0lBNkJ4QixZQUFvQixZQUEwQixFQUFVLFdBQXdCO1FBQTVELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFidkUsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFPZixXQUFNLEdBQUcsQ0FBQyxDQUFDO0lBS2dFLENBQUM7SUFFckYsUUFBUSxLQUFLLENBQUM7SUFFZCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLE9BQU87UUFDYixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0MsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNoRDtRQUNELE9BQU8sT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFTyxlQUFlLENBQUMsR0FBUTtRQUM5QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUMxRCxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSztZQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTTtZQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNwQixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7OztZQXJFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7O1lBTFEsWUFBWTtZQUZaLFdBQVc7OztxQkFVakIsS0FBSzttQkFDTCxLQUFLO29CQUdMLEtBQUs7cUJBRUwsS0FBSyxZQUNMLFdBQVcsU0FBQyxpQkFBaUI7a0JBRzdCLEtBQUs7bUJBR0wsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7b0JBQ0wsS0FBSztvQkFHTCxLQUFLO29CQUNMLEtBQUs7bUJBQ0wsS0FBSztxQkFDTCxLQUFLO3VCQUVMLFdBQVcsU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWNvblNlcnZpY2UgfSBmcm9tICcuL2ljb24uc2VydmljZSc7XHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZSwgU1ZHIH0gZnJvbSAnLi9zdmcnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdpYy1pY29uLFtpY0ljb25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSWNvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgaWNJY29uOiBvYmplY3QgfCBzdHJpbmc7XHJcbiAgQElucHV0KCkgaWNvbjogb2JqZWN0IHwgc3RyaW5nO1xyXG5cclxuICAvLyBPcHRpb25hbCBQcm9wZXJ0aWVzXHJcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmljLWlubGluZScpXHJcbiAgaW5saW5lOiBib29sZWFuO1xyXG5cclxuICBASW5wdXQoKSBib3g6IGJvb2xlYW47XHJcblxyXG4gIC8vIERpbWVuc2lvbnMgYW5kIEFsaWdubWVudFxyXG4gIEBJbnB1dCgpIHNpemU6IHN0cmluZztcclxuICBASW5wdXQoKSB3aWR0aCA9ICcxZW0nO1xyXG4gIEBJbnB1dCgpIGhlaWdodCA9ICcxZW0nO1xyXG4gIEBJbnB1dCgpIGFsaWduOiBzdHJpbmc7XHJcblxyXG4gIC8vIFRyYW5zZm9ybWF0aW9uc1xyXG4gIEBJbnB1dCgpIGhGbGlwOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHZGbGlwOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGZsaXA6IHN0cmluZztcclxuICBASW5wdXQoKSByb3RhdGUgPSAwO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2lubmVySFRNTCcpXHJcbiAgaWNvbkhUTUw6IFNhZmVIdG1sO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcml2YXRlIGljb25TZXJ2aWNlOiBJY29uU2VydmljZSkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkgeyB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmIChjaGFuZ2VzKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlSWNvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlSWNvbigpIHtcclxuICAgIGNvbnN0IGljb24gPSB0aGlzLmdldEljb24oKTtcclxuICAgIGNvbnN0IHN2ZyA9IG5ldyBTVkcobm9ybWFsaXplKGljb24pKTtcclxuICAgIHRoaXMuaWNvbkhUTUwgPSB0aGlzLmdlbmVyYXRlU3ZnSHRtbChzdmcpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRJY29uKCk6IG9iamVjdCB7XHJcbiAgICBjb25zdCBpY29uSW5wdXQgPSB0aGlzLmljb24gfHwgdGhpcy5pY0ljb247XHJcbiAgICBpZiAodHlwZW9mIGljb25JbnB1dCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGljb25JbnB1dCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbSWNvbmlmeV06IE5vIGljb24gcHJvdmlkZWQnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0eXBlb2YgaWNvbklucHV0ID09PSAnb2JqZWN0JyA/IGljb25JbnB1dCA6IHRoaXMuaWNvblNlcnZpY2UuZ2V0KGljb25JbnB1dCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdlbmVyYXRlU3ZnSHRtbChzdmc6IFNWRyk6IFNhZmVIdG1se1xyXG4gICAgcmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHN2Zy5nZXRTVkcoe1xyXG4gICAgICB3aWR0aDogdGhpcy5zaXplIHx8IHRoaXMud2lkdGgsXHJcbiAgICAgIGhlaWdodDogdGhpcy5zaXplIHx8IHRoaXMuaGVpZ2h0LFxyXG4gICAgICBjb2xvcjogdGhpcy5jb2xvcixcclxuICAgICAgaW5saW5lOiB0aGlzLmlubGluZSxcclxuICAgICAgYm94OiB0aGlzLmJveCxcclxuICAgICAgYWxpZ246IHRoaXMuYWxpZ24sXHJcbiAgICAgIGhGbGlwOiB0aGlzLmhGbGlwLFxyXG4gICAgICB2RmxpcDogdGhpcy52RmxpcCxcclxuICAgICAgZmxpcDogdGhpcy5mbGlwLFxyXG4gICAgICByb3RhdGU6IHRoaXMucm90YXRlXHJcbiAgICB9KSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==