import { isPipe } from './ivy';
import { getSymbol, isFunction, completeSubjectOnTheInstance, markAsDecorated } from './internals';
function unsubscribe(property) {
    property && isFunction(property.unsubscribe) && property.unsubscribe();
}
function unsubscribeIfPropertyIsArrayLike(property) {
    Array.isArray(property) && property.forEach(unsubscribe);
}
function decorateNgOnDestroy(ngOnDestroy, options) {
    return function () {
        var _a;
        // Invoke the original `ngOnDestroy` if it exists
        ngOnDestroy && ngOnDestroy.call(this);
        // It's important to use `this` instead of caching instance
        // that may lead to memory leaks
        completeSubjectOnTheInstance(this, getSymbol());
        // Check if subscriptions are pushed to some array
        if (options.arrayName) {
            return unsubscribeIfPropertyIsArrayLike(this[options.arrayName]);
        }
        // Loop through the properties and find subscriptions
        if (options.checkProperties) {
            for (const property in this) {
                if ((_a = options.blackList) === null || _a === void 0 ? void 0 : _a.includes(property)) {
                    continue;
                }
                unsubscribe(this[property]);
            }
        }
    };
}
function decorateProviderDirectiveOrComponent(type, options) {
    type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);
}
function decoratePipe(type, options) {
    const def = type.Éµpipe;
    def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);
}
export function UntilDestroy(options = {}) {
    return (type) => {
        if (isPipe(type)) {
            decoratePipe(type, options);
        }
        else {
            decorateProviderDirectiveOrComponent(type, options);
        }
        markAsDecorated(type);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdW50aWwtZGVzdHJveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQVksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUVWLDRCQUE0QixFQUM1QixlQUFlLEVBQ2hCLE1BQU0sYUFBYSxDQUFDO0FBRXJCLFNBQVMsV0FBVyxDQUFDLFFBQXNDO0lBQ3pELFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6RSxDQUFDO0FBRUQsU0FBUyxnQ0FBZ0MsQ0FBQyxRQUFlO0lBQ3ZELEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FDMUIsV0FBNEMsRUFDNUMsT0FBNEI7SUFFNUIsT0FBTzs7UUFDTCxpREFBaUQ7UUFDakQsV0FBVyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEMsMkRBQTJEO1FBQzNELGdDQUFnQztRQUNoQyw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUVoRCxrREFBa0Q7UUFDbEQsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ3JCLE9BQU8sZ0NBQWdDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQscURBQXFEO1FBQ3JELElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRTtZQUMzQixLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksRUFBRTtnQkFDM0IsVUFBSSxPQUFPLENBQUMsU0FBUywwQ0FBRSxRQUFRLENBQUMsUUFBUSxHQUFHO29CQUN6QyxTQUFTO2lCQUNWO2dCQUVELFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUM3QjtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsb0NBQW9DLENBQzNDLElBQTZELEVBQzdELE9BQTRCO0lBRTVCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBSSxJQUFpQixFQUFFLE9BQTRCO0lBQ3RFLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdkIsR0FBRyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLFVBQStCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQVMsRUFBRSxFQUFFO1FBQ25CLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDN0I7YUFBTTtZQUNMLG9DQUFvQyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNyRDtRQUVELGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0YWJsZVR5cGUsXG4gIMm1Q29tcG9uZW50VHlwZSBhcyBDb21wb25lbnRUeXBlLFxuICDJtURpcmVjdGl2ZVR5cGUgYXMgRGlyZWN0aXZlVHlwZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkxpa2UgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUGlwZVR5cGUsIGlzUGlwZSB9IGZyb20gJy4vaXZ5JztcbmltcG9ydCB7XG4gIGdldFN5bWJvbCxcbiAgaXNGdW5jdGlvbixcbiAgVW50aWxEZXN0cm95T3B0aW9ucyxcbiAgY29tcGxldGVTdWJqZWN0T25UaGVJbnN0YW5jZSxcbiAgbWFya0FzRGVjb3JhdGVkXG59IGZyb20gJy4vaW50ZXJuYWxzJztcblxuZnVuY3Rpb24gdW5zdWJzY3JpYmUocHJvcGVydHk6IFN1YnNjcmlwdGlvbkxpa2UgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgcHJvcGVydHkgJiYgaXNGdW5jdGlvbihwcm9wZXJ0eS51bnN1YnNjcmliZSkgJiYgcHJvcGVydHkudW5zdWJzY3JpYmUoKTtcbn1cblxuZnVuY3Rpb24gdW5zdWJzY3JpYmVJZlByb3BlcnR5SXNBcnJheUxpa2UocHJvcGVydHk6IGFueVtdKTogdm9pZCB7XG4gIEFycmF5LmlzQXJyYXkocHJvcGVydHkpICYmIHByb3BlcnR5LmZvckVhY2godW5zdWJzY3JpYmUpO1xufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZU5nT25EZXN0cm95KFxuICBuZ09uRGVzdHJveTogKCgpID0+IHZvaWQpIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9uc1xuKSB7XG4gIHJldHVybiBmdW5jdGlvbih0aGlzOiBhbnkpIHtcbiAgICAvLyBJbnZva2UgdGhlIG9yaWdpbmFsIGBuZ09uRGVzdHJveWAgaWYgaXQgZXhpc3RzXG4gICAgbmdPbkRlc3Ryb3kgJiYgbmdPbkRlc3Ryb3kuY2FsbCh0aGlzKTtcblxuICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIHVzZSBgdGhpc2AgaW5zdGVhZCBvZiBjYWNoaW5nIGluc3RhbmNlXG4gICAgLy8gdGhhdCBtYXkgbGVhZCB0byBtZW1vcnkgbGVha3NcbiAgICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlKHRoaXMsIGdldFN5bWJvbCgpKTtcblxuICAgIC8vIENoZWNrIGlmIHN1YnNjcmlwdGlvbnMgYXJlIHB1c2hlZCB0byBzb21lIGFycmF5XG4gICAgaWYgKG9wdGlvbnMuYXJyYXlOYW1lKSB7XG4gICAgICByZXR1cm4gdW5zdWJzY3JpYmVJZlByb3BlcnR5SXNBcnJheUxpa2UodGhpc1tvcHRpb25zLmFycmF5TmFtZV0pO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgcHJvcGVydGllcyBhbmQgZmluZCBzdWJzY3JpcHRpb25zXG4gICAgaWYgKG9wdGlvbnMuY2hlY2tQcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHRoaXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmxhY2tMaXN0Py5pbmNsdWRlcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuc3Vic2NyaWJlKHRoaXNbcHJvcGVydHldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlUHJvdmlkZXJEaXJlY3RpdmVPckNvbXBvbmVudDxUPihcbiAgdHlwZTogSW5qZWN0YWJsZVR5cGU8VD4gfCBEaXJlY3RpdmVUeXBlPFQ+IHwgQ29tcG9uZW50VHlwZTxUPixcbiAgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9uc1xuKTogdm9pZCB7XG4gIHR5cGUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZGVjb3JhdGVOZ09uRGVzdHJveSh0eXBlLnByb3RvdHlwZS5uZ09uRGVzdHJveSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlUGlwZTxUPih0eXBlOiBQaXBlVHlwZTxUPiwgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9ucyk6IHZvaWQge1xuICBjb25zdCBkZWYgPSB0eXBlLsm1cGlwZTtcbiAgZGVmLm9uRGVzdHJveSA9IGRlY29yYXRlTmdPbkRlc3Ryb3koZGVmLm9uRGVzdHJveSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVbnRpbERlc3Ryb3kob3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9ucyA9IHt9KTogQ2xhc3NEZWNvcmF0b3Ige1xuICByZXR1cm4gKHR5cGU6IGFueSkgPT4ge1xuICAgIGlmIChpc1BpcGUodHlwZSkpIHtcbiAgICAgIGRlY29yYXRlUGlwZSh0eXBlLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjb3JhdGVQcm92aWRlckRpcmVjdGl2ZU9yQ29tcG9uZW50KHR5cGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIG1hcmtBc0RlY29yYXRlZCh0eXBlKTtcbiAgfTtcbn1cbiJdfQ==