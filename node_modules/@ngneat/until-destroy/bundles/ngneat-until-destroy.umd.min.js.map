{"version":3,"sources":["../../src/lib/ivy.ts","../../src/lib/internals.ts","../../src/lib/until-destroy.ts","../../src/lib/until-destroyed.ts"],"names":["NG_PIPE_DEF","ɵNG_PIPE_DEF","isFunction","target","DESTROY","Symbol","DECORATOR_APPLIED","getSymbol","destroyMethodName","ensureClassIsDecorated","instance","type","constructor","prototype","Error","createSubjectOnTheInstance","symbol","Subject","completeSubjectOnTheInstance","next","complete","unsubscribe","property","decorateNgOnDestroy","ngOnDestroy","options","call","this","arrayName","Array","isArray","forEach","unsubscribeIfPropertyIsArrayLike","checkProperties","_a","blackList","includes","def","ɵpipe","onDestroy","decoratePipe","decorateProviderDirectiveOrComponent","markAsDecorated","source","originalDestroy","name","apply","arguments","overrideNonDirectiveInstanceMethod","pipe","takeUntil"],"mappings":"kcAEA,IAAMA,EAAcC,EAAAA,sBCGJC,EAAWC,GACzB,MAAyB,mBAAXA,EAOhB,IAAMC,EAAyBC,OAAO,aAKhCC,EAAmCD,OAAO,+BAShCE,EAAaC,GAC3B,MAAiC,iBAAtBA,EACFH,OAAO,cAAcG,GAErBJ,WAkBKK,EAAuBC,GACrC,GAyBAC,EAzBqBD,EAASE,cA2BrBN,KAAqBK,EAAKE,WA1BjC,MAAM,IAAIC,MACR,0IAsBN,IACEH,WAjBcI,EAA2BL,EAAeM,GACnDN,EAASM,KACZN,EAASM,GAAU,IAAIC,EAAAA,kBAIXC,EAA6BR,EAAeM,GACtDN,EAASM,KACXN,EAASM,GAAQG,OACjBT,EAASM,GAAQI,WAGjBV,EAASM,GAAU,MCtDvB,SAASK,EAAYC,GACnBA,GAAYpB,EAAWoB,EAASD,cAAgBC,EAASD,cAO3D,SAASE,EACPC,EACAC,GAEA,OAAO,iBASL,GAPAD,GAAeA,EAAYE,KAAKC,MAIhCT,EAA6BS,KAAMpB,KAG/BkB,EAAQG,UACV,OAlBN,SAA0CN,GACxCO,MAAMC,QAAQR,IAAaA,EAASS,QAAQV,GAiBjCW,CAAiCL,KAAKF,EAAQG,YAIvD,GAAIH,EAAQQ,gBACV,IAAK,IAAMX,KAAYK,MACA,QAArBO,EAAIT,EAAQU,iBAAS,IAAAD,OAAA,EAAAA,EAAEE,SAASd,KAIhCD,EAAYM,KAAKL,6BAkBIG,GAC3B,YAD2B,IAAAA,IAAAA,EAAA,IACpB,SAACd,GACKA,EF1DGX,GEmDlB,SAAyBW,EAAmBc,GAC1C,IAAMY,EAAM1B,EAAK2B,MACjBD,EAAIE,UAAYhB,EAAoBc,EAAIE,UAAWd,GAM/Ce,CAAa7B,EAAMc,GAfzB,SACEd,EACAc,GAEAd,EAAKE,UAAUW,YAAcD,EAAoBZ,EAAKE,UAAUW,YAAaC,GAazEgB,CAAqC9B,EAAMc,YDnC/Cd,GAIAA,EAAKE,UAAUP,IAAqB,ECkClCoC,CAAgB/B,+BCrCcD,EAAaF,GAC7C,OAAO,SAAImC,GACT,IAAM3B,EAAST,EAAaC,GAW5B,MAPiC,iBAAtBA,EAhCf,SACEE,EACAF,EACAQ,GAEA,IAAM4B,EAAkBlC,EAASF,GAEjC,IAAoC,IAAhCN,EAAW0C,GACb,MAAM,IAAI9B,MACLJ,EAASE,YAAYiC,KAAI,kDAAkDrC,GAIlFO,EAA2BL,EAAUM,GAErCN,EAASF,GAAqB,WAC5BN,EAAW0C,IAAoBA,EAAgBE,MAAMnB,KAAMoB,WAC3D7B,EAA6BS,KAAMX,GAKnCN,EAASF,GAAqBoC,GAW5BI,CAAmCtC,EAAUF,EAAmBQ,IAEhEP,EAAuBC,GACvBK,EAA2BL,EAAUM,IAGhC2B,EAAOM,KAAKC,EAAAA,UAAcxC,EAAiBM","sourcesContent":["import { Type, ÉµNG_PIPE_DEF, ÉµPipeDef } from '@angular/core';\n\nconst NG_PIPE_DEF = ÉµNG_PIPE_DEF as 'Éµpipe';\n\n// Angular doesn't expose publicly `PipeType` but it actually has it.\nexport interface PipeType<T> extends Type<T> {\n  Éµpipe: ÉµPipeDef<T>;\n}\n\nexport function isPipe<T>(target: any): target is PipeType<T> {\n  return !!target[NG_PIPE_DEF];\n}\n","import { InjectableType, ÉµDirectiveType, ÉµComponentType } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { PipeType } from './ivy';\n\nexport function isFunction(target: unknown) {\n  return typeof target === 'function';\n}\n\n/**\n * Applied to instances and stores `Subject` instance when\n * no custom destroy method is provided.\n */\nconst DESTROY: unique symbol = Symbol('__destroy');\n\n/**\n * Applied to definitions and informs that class is decorated\n */\nconst DECORATOR_APPLIED: unique symbol = Symbol('__decoratorApplied');\n\n/**\n * If we use the `untilDestroyed` operator multiple times inside the single\n * instance providing different `destroyMethodName`, then all streams will\n * subscribe to the single subject. If any method is invoked, the subject will\n * emit and all streams will be unsubscribed. We wan't to prevent this behavior,\n * thus we store subjects under different symbols.\n */\nexport function getSymbol<T>(destroyMethodName?: keyof T): symbol {\n  if (typeof destroyMethodName === 'string') {\n    return Symbol(`__destroy__${destroyMethodName}`);\n  } else {\n    return DESTROY;\n  }\n}\n\nexport function markAsDecorated<T>(\n  type: InjectableType<T> | PipeType<T> | ÉµDirectiveType<T> | ÉµComponentType<T>\n): void {\n  // Store this property on the prototype if it's an injectable class, component or directive.\n  // We will be able to handle class extension this way.\n  type.prototype[DECORATOR_APPLIED] = true;\n}\n\nexport interface UntilDestroyOptions {\n  blackList?: string[];\n  arrayName?: string;\n  checkProperties?: boolean;\n}\n\nexport function ensureClassIsDecorated(instance: any): never | void {\n  if (missingDecorator(instance.constructor)) {\n    throw new Error(\n      'untilDestroyed operator cannot be used inside directives or ' +\n        'components or providers that are not decorated with UntilDestroy decorator'\n    );\n  }\n}\n\nexport function createSubjectOnTheInstance(instance: any, symbol: symbol): void {\n  if (!instance[symbol]) {\n    instance[symbol] = new Subject<void>();\n  }\n}\n\nexport function completeSubjectOnTheInstance(instance: any, symbol: symbol): void {\n  if (instance[symbol]) {\n    instance[symbol].next();\n    instance[symbol].complete();\n    // We also have to re-assign this property thus in the future\n    // we will be able to create new subject on the same instance.\n    instance[symbol] = null;\n  }\n}\n\nfunction missingDecorator<T>(\n  type: InjectableType<T> | PipeType<T> | ÉµDirectiveType<T> | ÉµComponentType<T>\n): boolean {\n  return !(DECORATOR_APPLIED in type.prototype);\n}\n","import {\n  InjectableType,\n  ÉµComponentType as ComponentType,\n  ÉµDirectiveType as DirectiveType\n} from '@angular/core';\nimport { SubscriptionLike } from 'rxjs';\n\nimport { PipeType, isPipe } from './ivy';\nimport {\n  getSymbol,\n  isFunction,\n  UntilDestroyOptions,\n  completeSubjectOnTheInstance,\n  markAsDecorated\n} from './internals';\n\nfunction unsubscribe(property: SubscriptionLike | undefined): void {\n  property && isFunction(property.unsubscribe) && property.unsubscribe();\n}\n\nfunction unsubscribeIfPropertyIsArrayLike(property: any[]): void {\n  Array.isArray(property) && property.forEach(unsubscribe);\n}\n\nfunction decorateNgOnDestroy(\n  ngOnDestroy: (() => void) | null | undefined,\n  options: UntilDestroyOptions\n) {\n  return function(this: any) {\n    // Invoke the original `ngOnDestroy` if it exists\n    ngOnDestroy && ngOnDestroy.call(this);\n\n    // It's important to use `this` instead of caching instance\n    // that may lead to memory leaks\n    completeSubjectOnTheInstance(this, getSymbol());\n\n    // Check if subscriptions are pushed to some array\n    if (options.arrayName) {\n      return unsubscribeIfPropertyIsArrayLike(this[options.arrayName]);\n    }\n\n    // Loop through the properties and find subscriptions\n    if (options.checkProperties) {\n      for (const property in this) {\n        if (options.blackList?.includes(property)) {\n          continue;\n        }\n\n        unsubscribe(this[property]);\n      }\n    }\n  };\n}\n\nfunction decorateProviderDirectiveOrComponent<T>(\n  type: InjectableType<T> | DirectiveType<T> | ComponentType<T>,\n  options: UntilDestroyOptions\n): void {\n  type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);\n}\n\nfunction decoratePipe<T>(type: PipeType<T>, options: UntilDestroyOptions): void {\n  const def = type.Éµpipe;\n  def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);\n}\n\nexport function UntilDestroy(options: UntilDestroyOptions = {}): ClassDecorator {\n  return (type: any) => {\n    if (isPipe(type)) {\n      decoratePipe(type, options);\n    } else {\n      decorateProviderDirectiveOrComponent(type, options);\n    }\n\n    markAsDecorated(type);\n  };\n}\n","import { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  getSymbol,\n  isFunction,\n  createSubjectOnTheInstance,\n  completeSubjectOnTheInstance,\n  ensureClassIsDecorated\n} from './internals';\n\nfunction overrideNonDirectiveInstanceMethod(\n  instance: any,\n  destroyMethodName: string,\n  symbol: symbol\n): void {\n  const originalDestroy = instance[destroyMethodName];\n\n  if (isFunction(originalDestroy) === false) {\n    throw new Error(\n      `${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`\n    );\n  }\n\n  createSubjectOnTheInstance(instance, symbol);\n\n  instance[destroyMethodName] = function() {\n    isFunction(originalDestroy) && originalDestroy.apply(this, arguments);\n    completeSubjectOnTheInstance(this, symbol);\n    // We have to re-assign this property back to the original value.\n    // If the `untilDestroyed` operator is called for the same instance\n    // multiple times, then we will be able to get the original\n    // method again and not the patched one.\n    instance[destroyMethodName] = originalDestroy;\n  };\n}\n\nexport function untilDestroyed<T>(instance: T, destroyMethodName?: keyof T) {\n  return <U>(source: Observable<U>) => {\n    const symbol = getSymbol<T>(destroyMethodName);\n\n    // If `destroyMethodName` is passed then the developer applies\n    // this operator to something non-related to Angular DI system\n    if (typeof destroyMethodName === 'string') {\n      overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);\n    } else {\n      ensureClassIsDecorated(instance);\n      createSubjectOnTheInstance(instance, symbol);\n    }\n\n    return source.pipe(takeUntil<U>((instance as any)[symbol]));\n  };\n}\n"]}